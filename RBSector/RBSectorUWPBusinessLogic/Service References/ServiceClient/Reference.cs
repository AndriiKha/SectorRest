//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace RBSectorUWPBusinessLogic.ServiceClient {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tabs", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Tabs : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Category> Categoryk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingFieldField;
        
        private string TbNamek__BackingFieldField;
        
        private int TbRecidk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Category>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Category> Categoryk__BackingField {
            get {
                return this.Categoryk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Categoryk__BackingFieldField, value) != true)) {
                    this.Categoryk__BackingFieldField = value;
                    this.RaisePropertyChanged("Categoryk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Products>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingField {
            get {
                return this.Productsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Productsk__BackingFieldField, value) != true)) {
                    this.Productsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Productsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TbName>k__BackingField", IsRequired=true)]
        public string TbNamek__BackingField {
            get {
                return this.TbNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.TbNamek__BackingFieldField, value) != true)) {
                    this.TbNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("TbNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<TbRecid>k__BackingField", IsRequired=true)]
        public int TbRecidk__BackingField {
            get {
                return this.TbRecidk__BackingFieldField;
            }
            set {
                if ((this.TbRecidk__BackingFieldField.Equals(value) != true)) {
                    this.TbRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("TbRecidk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Category : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CtNamek__BackingFieldField;
        
        private int CtRecidk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Tabs Tabsk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CtName>k__BackingField", IsRequired=true)]
        public string CtNamek__BackingField {
            get {
                return this.CtNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.CtNamek__BackingFieldField, value) != true)) {
                    this.CtNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("CtNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<CtRecid>k__BackingField", IsRequired=true)]
        public int CtRecidk__BackingField {
            get {
                return this.CtRecidk__BackingFieldField;
            }
            set {
                if ((this.CtRecidk__BackingFieldField.Equals(value) != true)) {
                    this.CtRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("CtRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Products>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingField {
            get {
                return this.Productsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Productsk__BackingFieldField, value) != true)) {
                    this.Productsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Productsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Tabs>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Tabs Tabsk__BackingField {
            get {
                return this.Tabsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Tabsk__BackingFieldField, value) != true)) {
                    this.Tabsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Tabsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Products", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Products : object, System.ComponentModel.INotifyPropertyChanged {
        
        private RBSectorUWPBusinessLogic.ServiceClient.Category Categoryk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Images Imagesk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Ingredients Ingredientsk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> Ordersproductsk__BackingFieldField;
        
        private string PrNamek__BackingFieldField;
        
        private decimal PrPricek__BackingFieldField;
        
        private int PrRecidk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Tabs Tabsk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Category>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Category Categoryk__BackingField {
            get {
                return this.Categoryk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Categoryk__BackingFieldField, value) != true)) {
                    this.Categoryk__BackingFieldField = value;
                    this.RaisePropertyChanged("Categoryk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Images>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Images Imagesk__BackingField {
            get {
                return this.Imagesk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Imagesk__BackingFieldField, value) != true)) {
                    this.Imagesk__BackingFieldField = value;
                    this.RaisePropertyChanged("Imagesk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Ingredients>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Ingredients Ingredientsk__BackingField {
            get {
                return this.Ingredientsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Ingredientsk__BackingFieldField, value) != true)) {
                    this.Ingredientsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Ingredientsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Ordersproducts>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> Ordersproductsk__BackingField {
            get {
                return this.Ordersproductsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Ordersproductsk__BackingFieldField, value) != true)) {
                    this.Ordersproductsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Ordersproductsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PrName>k__BackingField", IsRequired=true)]
        public string PrNamek__BackingField {
            get {
                return this.PrNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.PrNamek__BackingFieldField, value) != true)) {
                    this.PrNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("PrNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PrPrice>k__BackingField", IsRequired=true)]
        public decimal PrPricek__BackingField {
            get {
                return this.PrPricek__BackingFieldField;
            }
            set {
                if ((this.PrPricek__BackingFieldField.Equals(value) != true)) {
                    this.PrPricek__BackingFieldField = value;
                    this.RaisePropertyChanged("PrPricek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<PrRecid>k__BackingField", IsRequired=true)]
        public int PrRecidk__BackingField {
            get {
                return this.PrRecidk__BackingFieldField;
            }
            set {
                if ((this.PrRecidk__BackingFieldField.Equals(value) != true)) {
                    this.PrRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("PrRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Tabs>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Tabs Tabsk__BackingField {
            get {
                return this.Tabsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Tabsk__BackingFieldField, value) != true)) {
                    this.Tabsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Tabsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Images", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Images : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImBytek__BackingFieldField;
        
        private string ImNamek__BackingFieldField;
        
        private int ImRecidk__BackingFieldField;
        
        private string ImTypek__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ImByte>k__BackingField", IsRequired=true)]
        public string ImBytek__BackingField {
            get {
                return this.ImBytek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ImBytek__BackingFieldField, value) != true)) {
                    this.ImBytek__BackingFieldField = value;
                    this.RaisePropertyChanged("ImBytek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ImName>k__BackingField", IsRequired=true)]
        public string ImNamek__BackingField {
            get {
                return this.ImNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ImNamek__BackingFieldField, value) != true)) {
                    this.ImNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("ImNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ImRecid>k__BackingField", IsRequired=true)]
        public int ImRecidk__BackingField {
            get {
                return this.ImRecidk__BackingFieldField;
            }
            set {
                if ((this.ImRecidk__BackingFieldField.Equals(value) != true)) {
                    this.ImRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("ImRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<ImType>k__BackingField", IsRequired=true)]
        public string ImTypek__BackingField {
            get {
                return this.ImTypek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.ImTypek__BackingFieldField, value) != true)) {
                    this.ImTypek__BackingFieldField = value;
                    this.RaisePropertyChanged("ImTypek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Products>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingField {
            get {
                return this.Productsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Productsk__BackingFieldField, value) != true)) {
                    this.Productsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Productsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ingredients", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Ingredients : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string IgCountk__BackingFieldField;
        
        private string IgDescriptionk__BackingFieldField;
        
        private string IgNamek__BackingFieldField;
        
        private int IgRecidk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<IgCount>k__BackingField", IsRequired=true)]
        public string IgCountk__BackingField {
            get {
                return this.IgCountk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.IgCountk__BackingFieldField, value) != true)) {
                    this.IgCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("IgCountk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<IgDescription>k__BackingField", IsRequired=true)]
        public string IgDescriptionk__BackingField {
            get {
                return this.IgDescriptionk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.IgDescriptionk__BackingFieldField, value) != true)) {
                    this.IgDescriptionk__BackingFieldField = value;
                    this.RaisePropertyChanged("IgDescriptionk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<IgName>k__BackingField", IsRequired=true)]
        public string IgNamek__BackingField {
            get {
                return this.IgNamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.IgNamek__BackingFieldField, value) != true)) {
                    this.IgNamek__BackingFieldField = value;
                    this.RaisePropertyChanged("IgNamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<IgRecid>k__BackingField", IsRequired=true)]
        public int IgRecidk__BackingField {
            get {
                return this.IgRecidk__BackingFieldField;
            }
            set {
                if ((this.IgRecidk__BackingFieldField.Equals(value) != true)) {
                    this.IgRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("IgRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Products>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Productsk__BackingField {
            get {
                return this.Productsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Productsk__BackingFieldField, value) != true)) {
                    this.Productsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Productsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ordersproducts", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Ordersproducts : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> OrdPrCountk__BackingFieldField;
        
        private int OrdPrRecidk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Orders Ordersk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Products Productsk__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OrdPrCount>k__BackingField", IsRequired=true)]
        public System.Nullable<int> OrdPrCountk__BackingField {
            get {
                return this.OrdPrCountk__BackingFieldField;
            }
            set {
                if ((this.OrdPrCountk__BackingFieldField.Equals(value) != true)) {
                    this.OrdPrCountk__BackingFieldField = value;
                    this.RaisePropertyChanged("OrdPrCountk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OrdPrRecid>k__BackingField", IsRequired=true)]
        public int OrdPrRecidk__BackingField {
            get {
                return this.OrdPrRecidk__BackingFieldField;
            }
            set {
                if ((this.OrdPrRecidk__BackingFieldField.Equals(value) != true)) {
                    this.OrdPrRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("OrdPrRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Orders>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Orders Ordersk__BackingField {
            get {
                return this.Ordersk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Ordersk__BackingFieldField, value) != true)) {
                    this.Ordersk__BackingFieldField = value;
                    this.RaisePropertyChanged("Ordersk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Products>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Products Productsk__BackingField {
            get {
                return this.Productsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Productsk__BackingFieldField, value) != true)) {
                    this.Productsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Productsk__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Orders", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Orders : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal OrdGetmoneyk__BackingFieldField;
        
        private System.DateTime OrdOrderdatek__BackingFieldField;
        
        private decimal OrdPricecostk__BackingFieldField;
        
        private int OrdRecidk__BackingFieldField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> Ordersproductsk__BackingFieldField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Usersdata Usersdatak__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OrdGetmoney>k__BackingField", IsRequired=true)]
        public decimal OrdGetmoneyk__BackingField {
            get {
                return this.OrdGetmoneyk__BackingFieldField;
            }
            set {
                if ((this.OrdGetmoneyk__BackingFieldField.Equals(value) != true)) {
                    this.OrdGetmoneyk__BackingFieldField = value;
                    this.RaisePropertyChanged("OrdGetmoneyk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OrdOrderdate>k__BackingField", IsRequired=true)]
        public System.DateTime OrdOrderdatek__BackingField {
            get {
                return this.OrdOrderdatek__BackingFieldField;
            }
            set {
                if ((this.OrdOrderdatek__BackingFieldField.Equals(value) != true)) {
                    this.OrdOrderdatek__BackingFieldField = value;
                    this.RaisePropertyChanged("OrdOrderdatek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OrdPricecost>k__BackingField", IsRequired=true)]
        public decimal OrdPricecostk__BackingField {
            get {
                return this.OrdPricecostk__BackingFieldField;
            }
            set {
                if ((this.OrdPricecostk__BackingFieldField.Equals(value) != true)) {
                    this.OrdPricecostk__BackingFieldField = value;
                    this.RaisePropertyChanged("OrdPricecostk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<OrdRecid>k__BackingField", IsRequired=true)]
        public int OrdRecidk__BackingField {
            get {
                return this.OrdRecidk__BackingFieldField;
            }
            set {
                if ((this.OrdRecidk__BackingFieldField.Equals(value) != true)) {
                    this.OrdRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("OrdRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Ordersproducts>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> Ordersproductsk__BackingField {
            get {
                return this.Ordersproductsk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Ordersproductsk__BackingFieldField, value) != true)) {
                    this.Ordersproductsk__BackingFieldField = value;
                    this.RaisePropertyChanged("Ordersproductsk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Usersdata>k__BackingField", IsRequired=true)]
        public RBSectorUWPBusinessLogic.ServiceClient.Usersdata Usersdatak__BackingField {
            get {
                return this.Usersdatak__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Usersdatak__BackingFieldField, value) != true)) {
                    this.Usersdatak__BackingFieldField = value;
                    this.RaisePropertyChanged("Usersdatak__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Usersdata", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Usersdata : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Orders> Ordersk__BackingFieldField;
        
        private string UsrEmailk__BackingFieldField;
        
        private string UsrFnamek__BackingFieldField;
        
        private string UsrLnamek__BackingFieldField;
        
        private string UsrLogink__BackingFieldField;
        
        private string UsrPasswordk__BackingFieldField;
        
        private int UsrRecidk__BackingFieldField;
        
        private string UsrRolek__BackingFieldField;
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<Orders>k__BackingField", IsRequired=true)]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Orders> Ordersk__BackingField {
            get {
                return this.Ordersk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.Ordersk__BackingFieldField, value) != true)) {
                    this.Ordersk__BackingFieldField = value;
                    this.RaisePropertyChanged("Ordersk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrEmail>k__BackingField", IsRequired=true)]
        public string UsrEmailk__BackingField {
            get {
                return this.UsrEmailk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrEmailk__BackingFieldField, value) != true)) {
                    this.UsrEmailk__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrEmailk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrFname>k__BackingField", IsRequired=true)]
        public string UsrFnamek__BackingField {
            get {
                return this.UsrFnamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrFnamek__BackingFieldField, value) != true)) {
                    this.UsrFnamek__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrFnamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrLname>k__BackingField", IsRequired=true)]
        public string UsrLnamek__BackingField {
            get {
                return this.UsrLnamek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrLnamek__BackingFieldField, value) != true)) {
                    this.UsrLnamek__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrLnamek__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrLogin>k__BackingField", IsRequired=true)]
        public string UsrLogink__BackingField {
            get {
                return this.UsrLogink__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrLogink__BackingFieldField, value) != true)) {
                    this.UsrLogink__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrLogink__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrPassword>k__BackingField", IsRequired=true)]
        public string UsrPasswordk__BackingField {
            get {
                return this.UsrPasswordk__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrPasswordk__BackingFieldField, value) != true)) {
                    this.UsrPasswordk__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrPasswordk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrRecid>k__BackingField", IsRequired=true)]
        public int UsrRecidk__BackingField {
            get {
                return this.UsrRecidk__BackingFieldField;
            }
            set {
                if ((this.UsrRecidk__BackingFieldField.Equals(value) != true)) {
                    this.UsrRecidk__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrRecidk__BackingField");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="<UsrRole>k__BackingField", IsRequired=true)]
        public string UsrRolek__BackingField {
            get {
                return this.UsrRolek__BackingFieldField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrRolek__BackingFieldField, value) != true)) {
                    this.UsrRolek__BackingFieldField = value;
                    this.RaisePropertyChanged("UsrRolek__BackingField");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.ITabsService")]
    public interface ITabsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/AddTabs", ReplyAction="http://tempuri.org/ITabsService/AddTabsResponse")]
        System.Threading.Tasks.Task<bool> AddTabsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/GetAllTabs", ReplyAction="http://tempuri.org/ITabsService/GetAllTabsResponse")]
        System.Threading.Tasks.Task<string> GetAllTabsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/GetTab", ReplyAction="http://tempuri.org/ITabsService/GetTabResponse")]
        System.Threading.Tasks.Task<RBSectorUWPBusinessLogic.ServiceClient.Tabs> GetTabAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/AddCategory", ReplyAction="http://tempuri.org/ITabsService/AddCategoryResponse")]
        System.Threading.Tasks.Task<bool> AddCategoryAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITabsServiceChannel : RBSectorUWPBusinessLogic.ServiceClient.ITabsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TabsServiceClient : System.ServiceModel.ClientBase<RBSectorUWPBusinessLogic.ServiceClient.ITabsService>, RBSectorUWPBusinessLogic.ServiceClient.ITabsService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TabsServiceClient() : 
                base(TabsServiceClient.GetDefaultBinding(), TabsServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITabsService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TabsServiceClient.GetBindingForEndpoint(endpointConfiguration), TabsServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TabsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TabsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> AddTabsAsync(string name) {
            return base.Channel.AddTabsAsync(name);
        }
        
        public System.Threading.Tasks.Task<string> GetAllTabsAsync() {
            return base.Channel.GetAllTabsAsync();
        }
        
        public System.Threading.Tasks.Task<RBSectorUWPBusinessLogic.ServiceClient.Tabs> GetTabAsync(string name) {
            return base.Channel.GetTabAsync(name);
        }
        
        public System.Threading.Tasks.Task<bool> AddCategoryAsync(string name) {
            return base.Channel.AddCategoryAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITabsService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITabsService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4126/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TabsServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITabsService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TabsServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITabsService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITabsService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.IMainService")]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SaveResult", ReplyAction="http://tempuri.org/IMainService/SaveResultResponse")]
        System.Threading.Tasks.Task<bool> SaveResultAsync(string json);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : RBSectorUWPBusinessLogic.ServiceClient.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.ClientBase<RBSectorUWPBusinessLogic.ServiceClient.IMainService>, RBSectorUWPBusinessLogic.ServiceClient.IMainService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MainServiceClient() : 
                base(MainServiceClient.GetDefaultBinding(), MainServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMainService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), MainServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> SaveResultAsync(string json) {
            return base.Channel.SaveResultAsync(json);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMainService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMainService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4126/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MainServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMainService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MainServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMainService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMainService,
        }
    }
}
