//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace RBSectorUWPBusinessLogic.ServiceClient {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseModel", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Products))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Images))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Ingredients))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Orders))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Usersdata))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RBSectorUWPBusinessLogic.ServiceClient.Tabs))]
    public partial class BaseModel : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int RECIDField;
        
        private string StatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RECID {
            get {
                return this.RECIDField;
            }
            set {
                if ((this.RECIDField.Equals(value) != true)) {
                    this.RECIDField = value;
                    this.RaisePropertyChanged("RECID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Category : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private string CtNameField;
        
        private int CtRecidField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> ProductsField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Tabs TabsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CtName {
            get {
                return this.CtNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CtNameField, value) != true)) {
                    this.CtNameField = value;
                    this.RaisePropertyChanged("CtName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CtRecid {
            get {
                return this.CtRecidField;
            }
            set {
                if ((this.CtRecidField.Equals(value) != true)) {
                    this.CtRecidField = value;
                    this.RaisePropertyChanged("CtRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Tabs Tabs {
            get {
                return this.TabsField;
            }
            set {
                if ((object.ReferenceEquals(this.TabsField, value) != true)) {
                    this.TabsField = value;
                    this.RaisePropertyChanged("Tabs");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Products", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Products : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private RBSectorUWPBusinessLogic.ServiceClient.Category CategoryField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Images ImagesField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Ingredients IngredientsField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> OrdersproductsField;
        
        private string PrNameField;
        
        private decimal PrPriceField;
        
        private int PrRecidField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Tabs TabsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Category Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Images Images {
            get {
                return this.ImagesField;
            }
            set {
                if ((object.ReferenceEquals(this.ImagesField, value) != true)) {
                    this.ImagesField = value;
                    this.RaisePropertyChanged("Images");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Ingredients Ingredients {
            get {
                return this.IngredientsField;
            }
            set {
                if ((object.ReferenceEquals(this.IngredientsField, value) != true)) {
                    this.IngredientsField = value;
                    this.RaisePropertyChanged("Ingredients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> Ordersproducts {
            get {
                return this.OrdersproductsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersproductsField, value) != true)) {
                    this.OrdersproductsField = value;
                    this.RaisePropertyChanged("Ordersproducts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrName {
            get {
                return this.PrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PrNameField, value) != true)) {
                    this.PrNameField = value;
                    this.RaisePropertyChanged("PrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PrPrice {
            get {
                return this.PrPriceField;
            }
            set {
                if ((this.PrPriceField.Equals(value) != true)) {
                    this.PrPriceField = value;
                    this.RaisePropertyChanged("PrPrice");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PrRecid {
            get {
                return this.PrRecidField;
            }
            set {
                if ((this.PrRecidField.Equals(value) != true)) {
                    this.PrRecidField = value;
                    this.RaisePropertyChanged("PrRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Tabs Tabs {
            get {
                return this.TabsField;
            }
            set {
                if ((object.ReferenceEquals(this.TabsField, value) != true)) {
                    this.TabsField = value;
                    this.RaisePropertyChanged("Tabs");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Images", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Images : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private string ImByteField;
        
        private string ImNameField;
        
        private int ImRecidField;
        
        private string ImTypeField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> ProductsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImByte {
            get {
                return this.ImByteField;
            }
            set {
                if ((object.ReferenceEquals(this.ImByteField, value) != true)) {
                    this.ImByteField = value;
                    this.RaisePropertyChanged("ImByte");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImName {
            get {
                return this.ImNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImNameField, value) != true)) {
                    this.ImNameField = value;
                    this.RaisePropertyChanged("ImName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImRecid {
            get {
                return this.ImRecidField;
            }
            set {
                if ((this.ImRecidField.Equals(value) != true)) {
                    this.ImRecidField = value;
                    this.RaisePropertyChanged("ImRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImType {
            get {
                return this.ImTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ImTypeField, value) != true)) {
                    this.ImTypeField = value;
                    this.RaisePropertyChanged("ImType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ingredients", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Ingredients : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private string IgCountField;
        
        private string IgDescriptionField;
        
        private string IgNameField;
        
        private int IgRecidField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> ProductsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IgCount {
            get {
                return this.IgCountField;
            }
            set {
                if ((object.ReferenceEquals(this.IgCountField, value) != true)) {
                    this.IgCountField = value;
                    this.RaisePropertyChanged("IgCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IgDescription {
            get {
                return this.IgDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.IgDescriptionField, value) != true)) {
                    this.IgDescriptionField = value;
                    this.RaisePropertyChanged("IgDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IgName {
            get {
                return this.IgNameField;
            }
            set {
                if ((object.ReferenceEquals(this.IgNameField, value) != true)) {
                    this.IgNameField = value;
                    this.RaisePropertyChanged("IgName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IgRecid {
            get {
                return this.IgRecidField;
            }
            set {
                if ((this.IgRecidField.Equals(value) != true)) {
                    this.IgRecidField = value;
                    this.RaisePropertyChanged("IgRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ordersproducts", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Ordersproducts : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private System.Nullable<int> OrdPrCountField;
        
        private int OrdPrRecidField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Orders OrdersField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Products ProductsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OrdPrCount {
            get {
                return this.OrdPrCountField;
            }
            set {
                if ((this.OrdPrCountField.Equals(value) != true)) {
                    this.OrdPrCountField = value;
                    this.RaisePropertyChanged("OrdPrCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrdPrRecid {
            get {
                return this.OrdPrRecidField;
            }
            set {
                if ((this.OrdPrRecidField.Equals(value) != true)) {
                    this.OrdPrRecidField = value;
                    this.RaisePropertyChanged("OrdPrRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Orders Orders {
            get {
                return this.OrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersField, value) != true)) {
                    this.OrdersField = value;
                    this.RaisePropertyChanged("Orders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Products Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Orders", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Orders : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private decimal OrdGetmoneyField;
        
        private System.DateTime OrdOrderdateField;
        
        private decimal OrdPricecostField;
        
        private int OrdRecidField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> OrdersproductsField;
        
        private RBSectorUWPBusinessLogic.ServiceClient.Usersdata UsersdataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OrdGetmoney {
            get {
                return this.OrdGetmoneyField;
            }
            set {
                if ((this.OrdGetmoneyField.Equals(value) != true)) {
                    this.OrdGetmoneyField = value;
                    this.RaisePropertyChanged("OrdGetmoney");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime OrdOrderdate {
            get {
                return this.OrdOrderdateField;
            }
            set {
                if ((this.OrdOrderdateField.Equals(value) != true)) {
                    this.OrdOrderdateField = value;
                    this.RaisePropertyChanged("OrdOrderdate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OrdPricecost {
            get {
                return this.OrdPricecostField;
            }
            set {
                if ((this.OrdPricecostField.Equals(value) != true)) {
                    this.OrdPricecostField = value;
                    this.RaisePropertyChanged("OrdPricecost");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OrdRecid {
            get {
                return this.OrdRecidField;
            }
            set {
                if ((this.OrdRecidField.Equals(value) != true)) {
                    this.OrdRecidField = value;
                    this.RaisePropertyChanged("OrdRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Ordersproducts> Ordersproducts {
            get {
                return this.OrdersproductsField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersproductsField, value) != true)) {
                    this.OrdersproductsField = value;
                    this.RaisePropertyChanged("Ordersproducts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RBSectorUWPBusinessLogic.ServiceClient.Usersdata Usersdata {
            get {
                return this.UsersdataField;
            }
            set {
                if ((object.ReferenceEquals(this.UsersdataField, value) != true)) {
                    this.UsersdataField = value;
                    this.RaisePropertyChanged("Usersdata");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Usersdata", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Usersdata : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Orders> OrdersField;
        
        private string UsrEmailField;
        
        private string UsrFnameField;
        
        private string UsrLnameField;
        
        private string UsrLoginField;
        
        private string UsrPasswordField;
        
        private int UsrRecidField;
        
        private string UsrRoleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Orders> Orders {
            get {
                return this.OrdersField;
            }
            set {
                if ((object.ReferenceEquals(this.OrdersField, value) != true)) {
                    this.OrdersField = value;
                    this.RaisePropertyChanged("Orders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsrEmail {
            get {
                return this.UsrEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrEmailField, value) != true)) {
                    this.UsrEmailField = value;
                    this.RaisePropertyChanged("UsrEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsrFname {
            get {
                return this.UsrFnameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrFnameField, value) != true)) {
                    this.UsrFnameField = value;
                    this.RaisePropertyChanged("UsrFname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsrLname {
            get {
                return this.UsrLnameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrLnameField, value) != true)) {
                    this.UsrLnameField = value;
                    this.RaisePropertyChanged("UsrLname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsrLogin {
            get {
                return this.UsrLoginField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrLoginField, value) != true)) {
                    this.UsrLoginField = value;
                    this.RaisePropertyChanged("UsrLogin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsrPassword {
            get {
                return this.UsrPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrPasswordField, value) != true)) {
                    this.UsrPasswordField = value;
                    this.RaisePropertyChanged("UsrPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UsrRecid {
            get {
                return this.UsrRecidField;
            }
            set {
                if ((this.UsrRecidField.Equals(value) != true)) {
                    this.UsrRecidField = value;
                    this.RaisePropertyChanged("UsrRecid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsrRole {
            get {
                return this.UsrRoleField;
            }
            set {
                if ((object.ReferenceEquals(this.UsrRoleField, value) != true)) {
                    this.UsrRoleField = value;
                    this.RaisePropertyChanged("UsrRole");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tabs", Namespace="http://schemas.datacontract.org/2004/07/RBSector.DataBase.Models")]
    public partial class Tabs : RBSectorUWPBusinessLogic.ServiceClient.BaseModel {
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Category> CategoryField;
        
        private System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> ProductsField;
        
        private string TbNameField;
        
        private int TbRecidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Category> Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Products> Products {
            get {
                return this.ProductsField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductsField, value) != true)) {
                    this.ProductsField = value;
                    this.RaisePropertyChanged("Products");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TbName {
            get {
                return this.TbNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TbNameField, value) != true)) {
                    this.TbNameField = value;
                    this.RaisePropertyChanged("TbName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TbRecid {
            get {
                return this.TbRecidField;
            }
            set {
                if ((this.TbRecidField.Equals(value) != true)) {
                    this.TbRecidField = value;
                    this.RaisePropertyChanged("TbRecid");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.ITabsService")]
    public interface ITabsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/AddTabs", ReplyAction="http://tempuri.org/ITabsService/AddTabsResponse")]
        System.Threading.Tasks.Task<bool> AddTabsAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/GetAllTabs", ReplyAction="http://tempuri.org/ITabsService/GetAllTabsResponse")]
        System.Threading.Tasks.Task<string> GetAllTabsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/GetTab", ReplyAction="http://tempuri.org/ITabsService/GetTabResponse")]
        System.Threading.Tasks.Task<RBSectorUWPBusinessLogic.ServiceClient.Tabs> GetTabAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITabsService/AddCategory", ReplyAction="http://tempuri.org/ITabsService/AddCategoryResponse")]
        System.Threading.Tasks.Task<bool> AddCategoryAsync(string name);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITabsServiceChannel : RBSectorUWPBusinessLogic.ServiceClient.ITabsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TabsServiceClient : System.ServiceModel.ClientBase<RBSectorUWPBusinessLogic.ServiceClient.ITabsService>, RBSectorUWPBusinessLogic.ServiceClient.ITabsService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TabsServiceClient() : 
                base(TabsServiceClient.GetDefaultBinding(), TabsServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITabsService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TabsServiceClient.GetBindingForEndpoint(endpointConfiguration), TabsServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TabsServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TabsServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TabsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<bool> AddTabsAsync(string name) {
            return base.Channel.AddTabsAsync(name);
        }
        
        public System.Threading.Tasks.Task<string> GetAllTabsAsync() {
            return base.Channel.GetAllTabsAsync();
        }
        
        public System.Threading.Tasks.Task<RBSectorUWPBusinessLogic.ServiceClient.Tabs> GetTabAsync(string name) {
            return base.Channel.GetTabAsync(name);
        }
        
        public System.Threading.Tasks.Task<bool> AddCategoryAsync(string name) {
            return base.Channel.AddCategoryAsync(name);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITabsService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITabsService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4126/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TabsServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITabsService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TabsServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITabsService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITabsService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.IMainService")]
    public interface IMainService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SaveResult", ReplyAction="http://tempuri.org/IMainService/SaveResultResponse")]
        System.Threading.Tasks.Task<string> SaveResultAsync(string json, string deleted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMainService/SaveOrder", ReplyAction="http://tempuri.org/IMainService/SaveOrderResponse")]
        System.Threading.Tasks.Task<bool> SaveOrderAsync(string json);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainServiceChannel : RBSectorUWPBusinessLogic.ServiceClient.IMainService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainServiceClient : System.ServiceModel.ClientBase<RBSectorUWPBusinessLogic.ServiceClient.IMainService>, RBSectorUWPBusinessLogic.ServiceClient.IMainService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MainServiceClient() : 
                base(MainServiceClient.GetDefaultBinding(), MainServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMainService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), MainServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MainServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MainServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> SaveResultAsync(string json, string deleted) {
            return base.Channel.SaveResultAsync(json, deleted);
        }
        
        public System.Threading.Tasks.Task<bool> SaveOrderAsync(string json) {
            return base.Channel.SaveOrderAsync(json);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMainService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMainService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4126/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MainServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMainService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MainServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMainService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMainService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.IUserService")]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/isLogIn", ReplyAction="http://tempuri.org/IUserService/isLogInResponse")]
        System.Threading.Tasks.Task<string> isLogInAsync(string pin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UpdateUser", ReplyAction="http://tempuri.org/IUserService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(RBSectorUWPBusinessLogic.ServiceClient.Usersdata user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetUser", ReplyAction="http://tempuri.org/IUserService/GetUserResponse")]
        System.Threading.Tasks.Task<RBSectorUWPBusinessLogic.ServiceClient.Usersdata> GetUserAsync(int recId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/AddUser", ReplyAction="http://tempuri.org/IUserService/AddUserResponse")]
        System.Threading.Tasks.Task<bool> AddUserAsync(string login, string password, string lname, string fname, string email, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/DeleteUser", ReplyAction="http://tempuri.org/IUserService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int recId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetAllUsers", ReplyAction="http://tempuri.org/IUserService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Usersdata>> GetAllUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : RBSectorUWPBusinessLogic.ServiceClient.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.ClientBase<RBSectorUWPBusinessLogic.ServiceClient.IUserService>, RBSectorUWPBusinessLogic.ServiceClient.IUserService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserServiceClient() : 
                base(UserServiceClient.GetDefaultBinding(), UserServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IUserService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(UserServiceClient.GetBindingForEndpoint(endpointConfiguration), UserServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> isLogInAsync(string pin) {
            return base.Channel.isLogInAsync(pin);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(RBSectorUWPBusinessLogic.ServiceClient.Usersdata user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public System.Threading.Tasks.Task<RBSectorUWPBusinessLogic.ServiceClient.Usersdata> GetUserAsync(int recId) {
            return base.Channel.GetUserAsync(recId);
        }
        
        public System.Threading.Tasks.Task<bool> AddUserAsync(string login, string password, string lname, string fname, string email, string role) {
            return base.Channel.AddUserAsync(login, password, lname, fname, email, role);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int recId) {
            return base.Channel.DeleteUserAsync(recId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<RBSectorUWPBusinessLogic.ServiceClient.Usersdata>> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IUserService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4126/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return UserServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IUserService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return UserServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IUserService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IUserService,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceClient.IOrdersService")]
    public interface IOrdersService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IOrdersService/GetOrders", ReplyAction="http://tempuri.org/IOrdersService/GetOrdersResponse")]
        System.Threading.Tasks.Task<string> GetOrdersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IOrdersServiceChannel : RBSectorUWPBusinessLogic.ServiceClient.IOrdersService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class OrdersServiceClient : System.ServiceModel.ClientBase<RBSectorUWPBusinessLogic.ServiceClient.IOrdersService>, RBSectorUWPBusinessLogic.ServiceClient.IOrdersService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public OrdersServiceClient() : 
                base(OrdersServiceClient.GetDefaultBinding(), OrdersServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IOrdersService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrdersServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(OrdersServiceClient.GetBindingForEndpoint(endpointConfiguration), OrdersServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrdersServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(OrdersServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrdersServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(OrdersServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public OrdersServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> GetOrdersAsync() {
            return base.Channel.GetOrdersAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IOrdersService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IOrdersService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:4126/Service1.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return OrdersServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IOrdersService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return OrdersServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IOrdersService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IOrdersService,
        }
    }
}
